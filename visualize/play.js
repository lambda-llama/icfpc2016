function fold(l, z, f) {
    for (var i = 0; i < l.length; i++) z = f(z, l[i]);
    return z;
}

function push(l, x) {
    l = l.concat();
    l.push(x);
    return l;
}

var problems = {
    sample: [
        [
            [[0, 0], [1, 0], [.5, .5], [0, .5]] // Polygon 1
        ],
        [], // delimiter
        [
            [[.5, .5], [0, 0]],
            [[0, 0], [1, 0]], [[1, 0], [.5, .5]],
            [[.5, .5], [0, .5]],
            [[0, .5], [0, 0]] // edges
        ]
    ],
    problem33: [[[[0.0, 0.0], [0.125, 0.0], [0.125, 0.125], [0.1875, 0.125], [0.3125, 0.25], [0.3125, 0.3125], [0.1875, 0.4375], [0.0, 0.4375]], [[0.125, 0.25], [0.125, 0.3125], [0.1875, 0.3125], [0.1875, 0.25]]], [], [[[0.1875, 0.125], [0.3125, 0.25]], [[0.0, 0.0], [0.125, 0.0]], [[0.0, 0.0], [0.0, 0.4375]], [[0.125, 0.0], [0.125, 0.4375]], [[0.1875, 0.125], [0.1875, 0.4375]], [[0.3125, 0.25], [0.3125, 0.3125]], [[0.125, 0.125], [0.1875, 0.125]], [[0.125, 0.3125], [0.0, 0.4375]], [[0.125, 0.25], [0.3125, 0.25]], [[0.125, 0.3125], [0.3125, 0.3125]], [[0.3125, 0.3125], [0.1875, 0.4375]], [[0.0, 0.4375], [0.1875, 0.4375]]]],
    problem35: [[[[0.26043956043956046, 0.0], [0.2892857142857143, 0.012019230769230782], [0.12994505494505493, 0.3944368131868132], [0.10109890109890107, 0.38241758241758245], [0.14505494505494504, 0.276923076923077], [0.0, 0.03076923076923077], [0.026923076923076883, 0.014903846153846156], [0.16007898351648348, 0.2408653846153846]]], [], [[[0.026923076923076883, 0.014903846153846156], [0.1799107142857143, 0.27451923076923074]], [[0.0, 0.03076923076923077], [0.14505494505494504, 0.276923076923077]], [[0.26043956043956046, 0.0], [0.2892857142857143, 0.012019230769230782]], [[0.26043956043956046, 0.0], [0.10109890109890107, 0.38241758241758245]], [[0.2892857142857143, 0.012019230769230782], [0.12994505494505493, 0.3944368131868132]], [[0.026923076923076883, 0.014903846153846156], [0.0, 0.03076923076923077]], [[0.10109890109890107, 0.38241758241758245], [0.12994505494505493, 0.3944368131868132]], [[0.1799107142857143, 0.27451923076923074], [0.14505494505494504, 0.276923076923077]]]],
    problem50: [[[[0.7068965517241379, 0.0], [0.5098522167487685, 0.2068965517241379], [0.5724137931034483, 0.28620689655172415], [0.4482758620689655, 0.27155172413793105], [0.36206896551724144, 0.3620689655172413], [0.27155172413793105, 0.2758620689655171], [0.1482758620689655, 0.29655172413793096], [0.20689655172413793, 0.2142857142857142], [0.0, 0.01724137931034475]]], [], [[[0.35344827586206895, 0.008620689655172376], [0.4482758620689655, 0.27155172413793105]], [[0.35344827586206895, 0.008620689655172376], [0.36206896551724144, 0.3620689655172413]], [[0.35344827586206895, 0.008620689655172376], [0.5724137931034483, 0.28620689655172415]], [[0.5301724137931034, 0.004310344827586188], [0.6206896551724138, 0.09051724137931028]], [[0.35344827586206895, 0.008620689655172376], [0.27155172413793105, 0.2758620689655171]], [[0.1767241379310345, 0.012931034482758563], [0.35775862068965525, 0.18534482758620685]], [[0.0, 0.01724137931034475], [0.36206896551724144, 0.3620689655172413]], [[0.35344827586206895, 0.008620689655172376], [0.1482758620689655, 0.29655172413793096]], [[0.1767241379310345, 0.012931034482758563], [0.09051724137931033, 0.10344827586206895]], [[0.5301724137931034, 0.004310344827586188], [0.35775862068965525, 0.18534482758620685]], [[0.7068965517241379, 0.0], [0.36206896551724144, 0.3620689655172413]], [[0.7068965517241379, 0.0], [0.0, 0.01724137931034475]], [[0.6206896551724138, 0.09051724137931028], [0.09051724137931033, 0.10344827586206895]], [[0.4482758620689655, 0.27155172413793105], [0.5724137931034483, 0.28620689655172415]], [[0.27155172413793105, 0.2758620689655171], [0.1482758620689655, 0.29655172413793096]]]],
    problem66: [[[[0.096959951613841, 0.0], [0.5722529101682955, 0.023764647927722704], [0.9433995762231598, 0.2325291138542065], [0.6653545107819002, 0.7268445549114515], [0.7219877636140429, 0.7663972003368444], [0.7203055550571251, 0.8215641185067746], [0.7846169500446437, 0.9249458974892317], [0.7806905922425944, 0.9354442741604849], [0.7409019005259262, 0.9205634363845983], [0.7173587324461952, 0.9182032190332468], [0.36604166220790035, 0.5178045584627127], [0.19507338971415458, 0.18880356224371786], [0.04623592466732429, 0.25392897947553794], [0.0, 0.14826151331428594]]], [], [[[0.6671545486095891, 0.7281017007469894], [0.7089419131267891, 0.9086105078693159]], [[0.07344771652135518, 0.03595257112025607], [0.10308079888302071, 0.14826151331428594]], [[0.7219877636140429, 0.7663972003368444], [0.7173587324461952, 0.9182032190332468]], [[0.21283378732015343, 0.0057936917853156356], [0.7846169500446437, 0.9249458974892317]], [[0.096959951613841, 0.0], [0.36604166220790035, 0.5178045584627127]], [[0.0, 0.14826151331428594], [0.04623592466732429, 0.25392897947553794]], [[0.7211598567534113, 0.12934845415863094], [0.562054405451116, 0.7412017301290514]], [[0.096959951613841, 0.0], [0.0, 0.14826151331428594]], [[0.36604166220790035, 0.5178045584627127], [0.7173587324461952, 0.9182032190332468]], [[0.5722529101682955, 0.023764647927722704], [0.9433995762231598, 0.2325291138542065]], [[0.21283378732015343, 0.0057936917853156356], [0.10308079888302071, 0.14826151331428594]], [[0.7846169500446437, 0.9249458974892317], [0.7806905922425944, 0.9354442741604849]], [[0.36604166220790035, 0.5178045584627127], [0.7219877636140429, 0.7663972003368444]], [[0.9433995762231598, 0.2325291138542065], [0.6200802668812455, 0.807334233110806]], [[0.25391967977179375, 0.007847986407897634], [0.7211598567534113, 0.12934845415863094]], [[0.096959951613841, 0.0], [0.5722529101682955, 0.023764647927722704]], [[0.25391967977179375, 0.007847986407897634], [0.07344771652135518, 0.03595257112025607]], [[0.5722529101682955, 0.023764647927722704], [0.04623592466732429, 0.25392897947553794]], [[0.0, 0.14826151331428594], [0.10308079888302071, 0.14826151331428594]], [[0.7089419131267891, 0.9086105078693159], [0.7806905922425944, 0.9354442741604849]], [[0.6671545486095891, 0.7281017007469894], [0.562054405451116, 0.7412017301290514]], [[0.7173587324461952, 0.9182032190332468], [0.7846169500446437, 0.9249458974892317]], [[0.7219877636140429, 0.7663972003368444], [0.6200802668812455, 0.807334233110806]]]],
    problem78: [[[[0.6431985294117647, 0.0], [0.96875, 0.35629877369007806], [0.8684329710144928, 0.4075133485888634], [0.24113175675675674, 0.4858458621156711], [0.0, 0.36166007905138337], [0.2162590579710145, 0.17928073000536765]]], [], [[[0.9166579131294823, 0.2992867545540994], [0.9465788724132392, 0.34958932142338]], [[0.6431985294117647, 0.0], [0.96875, 0.35629877369007806]], [[0.42676373312771976, 0.32170128284426164], [0.4694134933828046, 0.41620074124928824]], [[0.6913161542896263, 0.1361131645529945], [0.9166579131294823, 0.2992867545540994]], [[0.4437787547347304, 0.3836900475048784], [0.45499617638075984, 0.4591401310213629]], [[0.43990957090880467, 0.310077110899692], [0.45499617638075984, 0.4591401310213629]], [[0.27913118873218135, 0.1528794196233193], [0.28048564606946813, 0.1605179480493707]], [[0.6431985294117647, 0.0], [0.6646984761753704, 0.39203928374886327]], [[0.27913118873218135, 0.1528794196233193], [0.4437787547347304, 0.3836900475048784]], [[0.016718207340289767, 0.3562381403345049], [0.014603277733709959, 0.36918094442829613]], [[0.36200363687655174, 0.37896522497609125], [0.4167987171341204, 0.46390993366978855]], [[0.34068206524933775, 0.12703293127398085], [0.3238123541858615, 0.31370339206101977]], [[0.34068206524933775, 0.12703293127398085], [0.6646984761753704, 0.39203928374886327]], [[0.03820141334561723, 0.3294433989086942], [0.08115037559635643, 0.3914065085545329]], [[0.4437787547347304, 0.3836900475048784], [0.4167987171341204, 0.46390993366978855]], [[0.36200363687655174, 0.37896522497609125], [0.4576468108042762, 0.45880914033919057]], [[0.2162590579710145, 0.17928073000536765], [0.08115037559635643, 0.3914065085545329]], [[0.42676373312771976, 0.32170128284426164], [0.6189715729149693, 0.4386641544488033]], [[0.03820141334561723, 0.3294433989086942], [0.14962014297520848, 0.4387162696895595]], [[0.016718207340289767, 0.3562381403345049], [0.04610948395969127, 0.38540702325003057]], [[0.9465788724132392, 0.34958932142338], [0.96875, 0.35629877369007806]], [[0.1476475003647721, 0.2371434217726502], [0.014603277733709959, 0.36918094442829613]], [[0.2162590579710145, 0.17928073000536765], [0.0, 0.36166007905138337]], [[0.24665530849367762, 0.16651671461756734], [0.1476475003647721, 0.2371434217726502]], [[0.43990957090880467, 0.310077110899692], [0.8684329710144928, 0.4075133485888634]], [[0.6431985294117647, 0.0], [0.2162590579710145, 0.17928073000536765]], [[0.6913161542896263, 0.1361131645529945], [0.4576468108042762, 0.45880914033919057]], [[0.28048564606946813, 0.1605179480493707], [0.24665530849367762, 0.16651671461756734]], [[0.0, 0.36166007905138337], [0.24113175675675674, 0.4858458621156711]], [[0.43990957090880467, 0.310077110899692], [0.24113175675675674, 0.4858458621156711]], [[0.3238123541858615, 0.31370339206101977], [0.9426413208109768, 0.3696279653473366]], [[0.9577383532515601, 0.34424711185704066], [0.9426413208109768, 0.3696279653473366]], [[0.016718207340289767, 0.3562381403345049], [0.0, 0.36166007905138337]], [[0.04610948395969127, 0.38540702325003057], [0.08115037559635643, 0.3914065085545329]], [[0.6646984761753704, 0.39203928374886327], [0.6189715729149693, 0.4386641544488033]], [[0.14962014297520848, 0.4387162696895595], [0.3433942027226995, 0.47307612048303277]], [[0.4694134933828046, 0.41620074124928824], [0.3433942027226995, 0.47307612048303277]], [[0.8684329710144928, 0.4075133485888634], [0.24113175675675674, 0.4858458621156711]], [[0.9577383532515601, 0.34424711185704066], [0.9465788724132392, 0.34958932142338]], [[0.96875, 0.35629877369007806], [0.8684329710144928, 0.4075133485888634]]]],
    problem82: [[[[0.2278280542986425, 0.0], [0.43371040723981896, 0.0], [0.6010395010395011, 0.12069887680513461], [0.6615384615384616, 0.31690140845070425], [0.6010395010395011, 0.5131039400962739], [0.43371040723981896, 0.6338028169014085], [0.2278280542986425, 0.6338028169014085], [0.0604989604989605, 0.5131039400962739], [0.0, 0.31690140845070425], [0.0604989604989605, 0.12069887680513461]]], [], [[[0.6010395010395011, 0.12069887680513461], [0.6615384615384616, 0.31690140845070425]], [[0.5594537741299603, 0.39836138851570835], [0.6010395010395011, 0.5131039400962739]], [[0.43371040723981896, 0.0], [0.6010395010395011, 0.12069887680513461]], [[0.5688683735386837, 0.3981551274854991], [0.6039504164296781, 0.5036636296471613]], [[0.35405574553321434, 0.0], [0.3864434612612074, 0.10327536108097415]], [[0.24077893878965068, 0.0], [0.5939445740746638, 0.5182216975419425]], [[0.31952604730803147, 0.0], [0.33896975777485566, 0.06833892253011045]], [[0.47956372954285237, 0.36825768369046485], [0.5939445740746638, 0.5182216975419425]], [[0.2407554866570697, 0.0], [0.2832037401401025, 0.1276622247538227]], [[0.24831398575869734, 0.0], [0.3864434612612074, 0.10327536108097415]], [[0.2278280542986425, 0.0], [0.33076923076923076, 0.07425417836705431]], [[0.24011703155905612, 0.0009712572639667405], [0.33896975777485566, 0.06833892253011045]], [[0.0604989604989605, 0.12069887680513461], [0.10208468740850113, 0.23544142838570012]], [[0.1867752575229586, 0.5103373986870826], [0.2278280542986425, 0.6338028169014085]], [[0.0675938874637976, 0.115581119359466], [0.42075952274881084, 0.6338028169014085]], [[0.0675938874637976, 0.115581119359466], [0.29301564991317586, 0.41113019005181606]], [[0.0, 0.31690140845070425], [0.0604989604989605, 0.5131039400962739]], [[0.5364261165259965, 0.32488749321484744], [0.6369437993524296, 0.3966636877703619]], [[0.5646950682084271, 0.4128230680591628], [0.6202804244149087, 0.45070422535211274]], [[0.0604989604989605, 0.12069887680513461], [0.0, 0.31690140845070425]], [[0.2407554866570697, 0.0], [0.23825471318975916, 0.00752102332242735]], [[0.31952604730803147, 0.0], [0.2832037401401025, 0.1276622247538227]], [[0.15417477030380256, 0.45070422535211274], [0.12139034626924472, 0.5570264983477393]], [[0.35405574553321434, 0.0], [0.33076923076923076, 0.07425417836705431]], [[0.2278280542986425, 0.0], [0.43371040723981896, 0.0]], [[0.024594662186031874, 0.2371391291310466], [0.2810443483262469, 0.42026096449890493]], [[0.3864434612612074, 0.10327536108097415], [0.2810443483262469, 0.42026096449890493]], [[0.5688683735386837, 0.3981551274854991], [0.5646950682084271, 0.4128230680591628]], [[0.24077893878965068, 0.0], [0.24011703155905612, 0.0009712572639667405]], [[0.5364261165259965, 0.32488749321484744], [0.43371040723981896, 0.6338028169014085]], [[0.6615384615384616, 0.31690140845070425], [0.6010395010395011, 0.5131039400962739]], [[0.15417477030380256, 0.45070422535211274], [0.4214214299794054, 0.6328315596374418]], [[0.2278280542986425, 0.0], [0.0604989604989605, 0.12069887680513461]], [[0.24831398575869734, 0.0], [0.23825471318975916, 0.00752102332242735]], [[0.6010395010395011, 0.12069887680513461], [0.2832037401401025, 0.1276622247538227]], [[0.0604989604989605, 0.5131039400962739], [0.2278280542986425, 0.6338028169014085]], [[0.10208468740850113, 0.23544142838570012], [0.0, 0.31690140845070425]], [[0.43371040723981896, 0.0], [0.33076923076923076, 0.07425417836705431]], [[0.10208468740850113, 0.23544142838570012], [0.024594662186031874, 0.2371391291310466]], [[0.4214214299794054, 0.6328315596374418], [0.42075952274881084, 0.6338028169014085]], [[0.6369437993524296, 0.3966636877703619], [0.5594537741299603, 0.39836138851570835]], [[0.29301564991317586, 0.41113019005181606], [0.2810443483262469, 0.42026096449890493]], [[0.1867752575229586, 0.5103373986870826], [0.12139034626924472, 0.5570264983477393]], [[0.15417477030380256, 0.45070422535211274], [0.6202804244149087, 0.45070422535211274]], [[0.5364261165259965, 0.32488749321484744], [0.47956372954285237, 0.36825768369046485]], [[0.1867752575229586, 0.5103373986870826], [0.0604989604989605, 0.5131039400962739]], [[0.6615384615384616, 0.31690140845070425], [0.5594537741299603, 0.39836138851570835]], [[0.6039504164296781, 0.5036636296471613], [0.5906046474604192, 0.5138427405313372]], [[0.2278280542986425, 0.6338028169014085], [0.43371040723981896, 0.6338028169014085]], [[0.6010395010395011, 0.5131039400962739], [0.43371040723981896, 0.6338028169014085]]]],
    problem92: [[[[0.0, 0.0], [0.0625, 0.0], [0.0625, 0.0625], [0.125, 0.0625], [0.1875, 0.125], [0.1875, 0.1875], [0.25, 0.1875], [0.3125, 0.25], [0.3125, 0.3125], [0.375, 0.3125], [0.4375, 0.375], [0.4375, 0.4375], [0.5, 0.4375], [0.5625, 0.5], [0.4375, 0.5], [0.375, 0.4375], [0.375, 0.375], [0.3125, 0.375], [0.25, 0.3125], [0.25, 0.25], [0.1875, 0.25], [0.125, 0.1875], [0.125, 0.125], [0.0625, 0.125], [0.0, 0.0625]]], [], [[[0.125, 0.0625], [0.1875, 0.125]], [[0.25, 0.1875], [0.3125, 0.25]], [[0.375, 0.3125], [0.4375, 0.375]], [[0.5, 0.4375], [0.5625, 0.5]], [[0.0, 0.0], [0.0625, 0.0]], [[0.0, 0.0], [0.0, 0.0625]], [[0.0625, 0.0], [0.0625, 0.125]], [[0.125, 0.0625], [0.125, 0.1875]], [[0.1875, 0.125], [0.1875, 0.25]], [[0.25, 0.1875], [0.25, 0.3125]], [[0.3125, 0.25], [0.3125, 0.375]], [[0.375, 0.3125], [0.375, 0.4375]], [[0.4375, 0.375], [0.4375, 0.5]], [[0.5, 0.4375], [0.5, 0.5]], [[0.0, 0.0625], [0.0625, 0.125]], [[0.125, 0.1875], [0.1875, 0.25]], [[0.25, 0.3125], [0.3125, 0.375]], [[0.375, 0.4375], [0.4375, 0.5]], [[0.0, 0.0625], [0.125, 0.0625]], [[0.0625, 0.125], [0.1875, 0.125]], [[0.125, 0.1875], [0.25, 0.1875]], [[0.1875, 0.25], [0.3125, 0.25]], [[0.25, 0.3125], [0.375, 0.3125]], [[0.3125, 0.375], [0.4375, 0.375]], [[0.375, 0.4375], [0.5, 0.4375]], [[0.4375, 0.5], [0.5625, 0.5]]]],

    problem101: [[[[0.4477340095233139, 0.0], [0.723707409077863, 0.37895583823207246], [0.48579122237726957, 0.1631839504071303], [0.4958294381809143, 0.20622640115527413], [0.36633559488004475, 0.5421272776225402], [0.3656361474435197, 0.5428616974308916], [0.36490172763516826, 0.5421622499943665], [0.21918619338084214, 0.21297379736991007], [0.22711408968808064, 0.1694931487654031], [0.1, 0.2966072384534838], [0.06561154618885565, 0.2966072384534838], [0.0, 0.19660723845348382], [0.0792354732489911, 0.2758427117024749], [0.25717059008122034, 0.004647888279075363], [0.35344827586206895, 0.04315896259141483]]], [], [[[0.4477340095233139, 0.0], [0.4958294381809143, 0.20622640115527413]], [[0.4477340095233139, 0.0], [0.723707409077863, 0.37895583823207246]], [[0.36150853125575666, 0.039469409066135275], [0.36333131241636674, 0.08412161237481386]], [[0.35380314109983113, 0.042996524278354764], [0.36633559488004475, 0.5421272776225402]], [[0.35344827586206895, 0.04315896259141483], [0.3585017835909632, 0.2503527794760759]], [[0.3530859134713964, 0.043014017635145785], [0.36490172763516826, 0.5421622499943665]], [[0.3452177333825992, 0.039866745599626996], [0.34557398089834634, 0.08455471802159487]], [[0.21918619338084214, 0.21297379736991007], [0.36490172763516826, 0.5421622499943665]], [[0.25717059008122034, 0.004647888279075363], [0.21918619338084214, 0.21297379736991007]], [[0.36150853125575666, 0.039469409066135275], [0.723707409077863, 0.37895583823207246]], [[0.35380314109983113, 0.042996524278354764], [0.723707409077863, 0.37895583823207246]], [[0.35344827586206895, 0.04315896259141483], [0.723707409077863, 0.37895583823207246]], [[0.36333131241636674, 0.08412161237481386], [0.4958294381809143, 0.20622640115527413]], [[0.0, 0.19660723845348382], [0.06561154618885565, 0.2966072384534838]], [[0.23399186461957835, 0.13177190426523333], [0.3585017835909632, 0.2503527794760759]], [[0.4958294381809143, 0.20622640115527413], [0.36633559488004475, 0.5421272776225402]], [[0.0, 0.19660723845348382], [0.09676998835229561, 0.2966072384534838]], [[0.0, 0.19660723845348382], [0.0998565279770445, 0.2966072384534838]], [[0.0, 0.19660723845348382], [0.1, 0.2966072384534838]], [[0.36490172763516826, 0.5421622499943665], [0.3656361474435197, 0.5428616974308916]], [[0.25717059008122034, 0.004647888279075363], [0.06561154618885565, 0.2966072384534838]], [[0.25717059008122034, 0.004647888279075363], [0.35344827586206895, 0.04315896259141483]], [[0.24968736781080278, 0.0456897164463238], [0.34557398089834634, 0.08455471802159487]], [[0.36333131241636674, 0.08412161237481386], [0.4770826588018058, 0.12584286050469118]], [[0.3452177333825992, 0.039866745599626996], [0.09676998835229561, 0.2966072384534838]], [[0.3530859134713964, 0.043014017635145785], [0.0998565279770445, 0.2966072384534838]], [[0.35344827586206895, 0.04315896259141483], [0.1, 0.2966072384534838]], [[0.34557398089834634, 0.08455471802159487], [0.21918619338084214, 0.21297379736991007]], [[0.4770826588018058, 0.12584286050469118], [0.3585017835909632, 0.2503527794760759]], [[0.4572091839133352, 0.040628208736505966], [0.24968736781080278, 0.0456897164463238]], [[0.4477340095233139, 0.0], [0.35344827586206895, 0.04315896259141483]], [[0.4572091839133352, 0.040628208736505966], [0.36333131241636674, 0.08412161237481386]], [[0.34557398089834634, 0.08455471802159487], [0.23399186461957835, 0.13177190426523333]], [[0.36633559488004475, 0.5421272776225402], [0.3656361474435197, 0.5428616974308916]], [[0.06561154618885565, 0.2966072384534838], [0.1, 0.2966072384534838]]]],
    donut: [[[[0, 1 / 8], [1 / 8, 0], [.25, 0], [3 / 8, 1 / 8], [3 / 8, .25], [.25, 3 / 8], [1 / 8, 3 / 8], [0, .25]]], [[[1 / 8, 1 / 8], [1 / 8, .25], [.25, .25], [.25, 1 / 8]]], [[[3 / 8, 1 / 8], [0, 1 / 8]], [[1 / 8, 3 / 8], [1 / 8, 0]], [[1 / 8, 0], [.25, 0]], [[.25, 3 / 8], [1 / 8, 3 / 8]], [[.25, 0], [3 / 8, 1 / 8]], [[3 / 8, .25], [.25, 3 / 8]], [[0, .25], [3 / 8, .25]], [[3 / 8, .25], [3 / 8, 1 / 8]], [[.25, 0], [.25, 3 / 8]], [[1 / 8, 3 / 8], [0, .25]], [[0, .25], [0, 1 / 8]], [[1 / 8, 0], [0, 1 / 8]]]],

    crane: [[[[.16, .72], [1831 / 6745, 4749 / 6745], [49 / 195, 224 / 585], [.35, .35], [224 / 585, 49 / 195], [.84, .28], [448 / 895, 294 / 895], [168 / 295, 441 / 1180], [.7, .7], [441 / 1180, 168 / 295], [294 / 895, 448 / 895], [.3, .7], [277 / 1015, 738 / 1015]]], [], [[[5603 / 14650, 2777 / 7325], [39221 / 111815, 38878 / 111815]], [[112 / 265, 147 / 530], [5603 / 14650, 2777 / 7325]], [[14 / 41, 147 / 410], [.7, .7]], [[.7, .7], [168 / 295, 441 / 1180]], [[.35, .35], [.84, .28]], [[49 / 195, 224 / 585], [.35, .35]], [[147 / 415, 28 / 83], [21 / 58, 10 / 29]], [[39221 / 111815, 38878 / 111815], [.84, .28]], [[.35, .35], [.3, .7]], [[5603 / 14650, 2777 / 7325], [168 / 295, 441 / 1180]], [[.5, 21 / 64], [.5, .5]], [[21 / 58, 10 / 29], [116 / 273, 29 / 104]], [[2777 / 7325, 5603 / 14650], [38878 / 111815, 39221 / 111815]], [[21 / 64, .5], [2777 / 7325, 5603 / 14650]], [[112 / 265, 147 / 530], [147 / 530, 112 / 265]], [[224 / 585, 49 / 195], [.84, .28]], [[28 / 83, 147 / 415], [188 / 635, 447 / 635]], [[116 / 273, 29 / 104], [5603 / 14650, 2777 / 7325]], [[277 / 1015, 738 / 1015], [.3, .7]], [[147 / 410, 14 / 41], [.7, .7]], [[50378 / 168335, 117957 / 168335], [38878 / 111815, 39221 / 111815]], [[5603 / 14650, 2777 / 7325], [.5, 21 / 64]], [[.84, .28], [147 / 415, 28 / 83]], [[10 / 29, 21 / 58], [28 / 83, 147 / 415]], [[.7, .7], [441 / 1180, 168 / 295]], [[168 / 295, 441 / 1180], [224 / 585, 49 / 195]], [[.16, .72], [188 / 635, 447 / 635]], [[.5, .5], [21 / 64, .5]], [[49 / 195, 224 / 585], [441 / 1180, 168 / 295]], [[2777 / 7325, 5603 / 14650], [147 / 530, 112 / 265]], [[441 / 1180, 168 / 295], [2777 / 7325, 5603 / 14650]], [[50378 / 168335, 117957 / 168335], [.16, .72]], [[29 / 104, 116 / 273], [2777 / 7325, 5603 / 14650]], [[224 / 585, 49 / 195], [.35, .35]], [[29 / 104, 116 / 273], [10 / 29, 21 / 58]], [[.16, .72], [277 / 1015, 738 / 1015]], [[.3, .7], [.16, .72]], [[.5, .5], [.35, .35]], [[49 / 195, 224 / 585], [277 / 1015, 738 / 1015]]]]
};

/**
 * @param {Object} t
 * @param {Object} n
 * @param {number} dataAndEvents
 * @return {undefined}
 */
function Z(t, n, dataAndEvents) {
    if (t) {
        var point = F(n, t);
        var x = W(R(t, n), [2, 0]);
        var l;
        var b;
        /** @type {number} */
        x = point[0] * x[0] + point[1] * x[1];
        if (point[0]) {
            /** @type {Array} */
            l = [x / point[0], 0];
            /** @type {Array} */
            b = [(x - point[1]) / point[0], 1];
        } else {
            if (!point[1]) {
                return;
            }
            /** @type {Array} */
            l = [0, x / point[1]];
            /** @type {Array} */
            b = [1, x / point[1]];
        }
        if (L(F(n, t), N(F(l, t)))[1] >= 0) {
            /** @type {Array} */
            x = l;
            /** @type {Array} */
            l = b;
            /** @type {Array} */
            b = x;
        }
        x = fold(I.concat().reverse(), [], function (log, dataAndEvents) {
            var matched = C(dataAndEvents[1], [[], []], function (kv, a, dataAndEvents) {
                var err = push(kv[0], a);
                var typePattern = F(b, l);
                var n = W(F(dataAndEvents[1], a[1]), typePattern);
                return n[1] != 0 && (n = W(F(a[1], l), typePattern)[1] / -n[1], 0 <= n && n < 1) ? (n = R(a[1], L(F(dataAndEvents[1], a[1]), [n, 0])), n = [R(L(F(dataAndEvents[0], a[0]), W(F(n, a[1]), F(dataAndEvents[1], a[1]))), a[0]), n], [push(kv[1], n), push(err, n)]) : [err, kv[1]];
            });
            matched = matched[1].length ? (L(F(b, l), N(F(matched[0][0][1], l)))[1] >= 0 && (matched = matched.reverse()), U(matched, function (e) {
                return [dataAndEvents[0], C(e, [], function (err, nil, dataAndEvents) {
                    return nil[1][0] == dataAndEvents[1][0] && (nil[1][1] == dataAndEvents[1][1] && (nil[0][0] == dataAndEvents[0][0] && nil[0][1] == dataAndEvents[0][1])) ? err : push(err, nil);
                })];
            })) : L(F(b, l), N(F(dataAndEvents[1][0][1], l)))[1] >= 0 ? [0, dataAndEvents] : [dataAndEvents];
            if (matched[0]) {
                log.unshift(matched[0]);
            }
            if (matched[1]) {
                var y = F(b, l);
                y = W(y, N(y));
                log = push(log, [!matched[1][0], U(matched[1][1], function (dataAndEvents) {
                    return [dataAndEvents[0], R(L(N(F(dataAndEvents[1], l)), y), l)];
                })]);
            }
            return log;
        });
        if (dataAndEvents) {
            B(x);
            var _ctx = $("#dst")[0].getContext("2d");
            O([t, n], function (dataAndEvents) {
                /** @type {string} */
                _ctx.fillStyle = "#000000";
                _ctx.fillRect(dataAndEvents[0] - 1 / 128, dataAndEvents[1] - 1 / 128, 1 / 64, 1 / 64);
            });
        } else {
            G.push(I);
            I = x;
            /** @type {number} */
            E = 0;
            B(I);
        }
    }
}
/**
 * @param {Object} x
 * @return {undefined}
 */
function B(x) {
    Q(x, 1);
    Q(x, 0);
}
/**
 * @param {Array} l
 * @param {Array} c
 * @return {?}
 */
function F(l, c) {
    return [l[0] - c[0], l[1] - c[1]];
}
/**
 * @param {string} d
 * @return {?}
 */
function T(d) {
    return $("#origami #" + d + " li.active").data(d + "-id");
}
/**
 * @param {Array} protos
 * @return {undefined}
 */
function Y(protos) {
    if (protos.length == 0) {
        $("#flip").click(function () {
            I = E ? G.pop() : (G.push(I), U(I, function (dataAndEvents) {
                return [!dataAndEvents[0], U(dataAndEvents[1], function (data) {
                    return [data[0], S(data[1])];
                })];
            }).reverse());
            /** @type {boolean} */
            E = !E;
            B(I);
        });
        $("#undo").click(function () {
            if (G.length >= 1) {
                I = G.pop();
            }
            B(I);
        });
        $.map(problems, function (deepDataAndEvents, dataAndEvents) {
            $("#origami #silhouette-list").append('<li data-silhouette-id="' + dataAndEvents + '"><a href="#">' + dataAndEvents + "</a></li>");
        });
        O([0, 1], function (match) {
            /** @type {string} */
            var target = "#origami #" + (match ? "silhouette" : "texture");
            var canvas = $(match ? "#dst" : "#src");
            /** @type {number} */
            var h = canvas.height() / 2 + 128;
            /** @type {number} */
            var delta = canvas.width() / 2 - 128;
            /** @type {number} */
            var color = 0;
            $(target + " a").click(function (validClass) {
                validClass.preventDefault();
                /** @type {string} */
                validClass = "active";
                $(target + " li").removeClass(validClass);
                $(this).parent().addClass(validClass);
                B(I);
            });
            if (match) {
                /**
                 * @param {Object} e
                 * @return {?}
                 */
                var move = function (e) {
                    var x = e.offsetX;
                    var y = e.offsetY;
                    var touches = e.originalEvent.changedTouches;
                    if (touches) {
                        var nodeOfs = $("#dst")[0].getBoundingClientRect();
                        /** @type {number} */
                        x = touches[0].pageX - nodeOfs.left;
                        /** @type {number} */
                        y = touches[0].pageY - nodeOfs.top;
                    }
                    return [(x - delta) / 256, (h - y) / 256];
                };
                var onMouseMove;
                canvas.mousedown(onMouseMove = function (e) {
                    $("#navi").remove();
                    color = move(e);
                    return false;
                });
                canvas.bind("touchstart", onMouseMove);
                canvas.mousemove(onMouseMove = function (e) {
                    Z(color, move(e), 1);
                    return false;
                });
                canvas.bind("touchmove", onMouseMove);
                canvas.mouseup(onMouseMove = function (e) {
                    Z(color, move(e));
                    /** @type {number} */
                    color = 0;
                    return false;
                });
                canvas.bind("touchend", onMouseMove);
            }
            canvas[0].getContext("2d").setTransform(256, 0, 0, -256, delta, h);
        });
        B(I);
    } else {
        /** @type {Image} */
        var im = new Image;
        J.push(im);
        /**
         * @return {undefined}
         */
        im.onload = function () {
            Y(protos);
        };
        /** @type {string} */
        im.src = "/texture" + protos.shift() + ".png";
    }
}
/**
 * @param {Array} j
 * @return {?}
 */
function S(j) {
    return [1 - j[0], j[1]];
}
/**
 * @param {Array} a
 * @param {Array} b
 * @return {?}
 */
function R(a, b) {
    return [a[0] + b[0], a[1] + b[1]];
}
/**
 * @param {Array} l
 * @param {?} value
 * @return {undefined}
 */
function Q(l, value) {
    var context = $(value ? "#dst" : "#src")[0].getContext("2d");
    context.clearRect(-1, -1, 3, 3);
    context.beginPath();
    /** @type {number} */
    context.lineWidth = 0.001;
    /** @type {string} */
    context.strokeStyle = "#000000";
    fold(Array.apply(null, {
        length: 40
    }), -10, function (dataAndEvents, d) {
        context.moveTo(-1, d = dataAndEvents / 10);
        context.lineTo(3, d);
        context.moveTo(d, -1);
        context.lineTo(d, 3);
        return dataAndEvents + 1;
    });
    context.stroke();
    O(l, function (objectTypes) {
        context.beginPath();
        var ab = objectTypes[1];
        O(ab, function (tagMap) {
            context.lineTo(tagMap[value][0], tagMap[value][1]);
        });
        context.closePath();
        var texture = T("texture");
        if (texture) {
            if (value && objectTypes[0]) {
                context.save();
                context.clip();
                context.translate(ab[0][1][0], ab[0][1][1]);
                l = S(ab[0][0]);
                ab = W(F(S(ab[1][0]), l), F(ab[1][1], ab[0][1]));
                context.rotate(-Math.atan2(ab[1], ab[0]));
                context.translate(-l[0], -l[1]);
                context.drawImage(J[texture - 1], 0, 0, 512, 512, 0, 0, 1, 1);
                context.restore();
            } else {
                /** @type {string} */
                context.fillStyle = "#cccccc";
                context.fill();
            }
        }
        /** @type {number} */
        context.lineWidth = 0.003;
        /** @type {string} */
        context.strokeStyle = "#000000";
        context.stroke();
    });
    if (value) {
        var silhouette = T("silhouette");
        if (silhouette = silhouette ? problems[silhouette] : null) {
            context.beginPath();
            O([silhouette[0], silhouette[1]], function (inplace) {
                O(inplace, function (inplace) {
                    O(inplace, function (pt) {
                        context.lineTo(pt[0], pt[1]);
                    });
                    context.closePath();
                });
            });
            /** @type {string} */
            context.fillStyle = "rgba(255,192,192,.8)";
            context.fill();
            context.beginPath();
            O(silhouette[2], function (dataAndEvents) {
                context.moveTo(dataAndEvents[0][0], dataAndEvents[0][1]);
                context.lineTo(dataAndEvents[1][0], dataAndEvents[1][1]);
            });
            /** @type {number} */
            context.lineWidth = 0.005;
            /** @type {string} */
            context.strokeStyle = "rgba(255,128,128,.8)";
            context.stroke();
        }
    }
}
/**
 * @param {?} n
 * @param {Array} m
 * @param {Function} set
 * @return {?}
 */
function C(n, m, set) {
    m = fold(n, [m], function (m, val) {
        return [m[1] ? set(m[0], m[1], val) : m[0], val];
    });
    return set(m[0], m[1], n[0]);
}
/**
 * @param {Array} a
 * @param {Array} b
 * @return {?}
 */
function L(a, b) {
    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
}
/**
 * @param {Array} v11
 * @param {Array} args
 * @return {?}
 */
function W(v11, args) {
    /** @type {number} */
    var d = args[0] * args[0] + args[1] * args[1];
    return [(args[0] * v11[0] + args[1] * v11[1]) / d, (args[0] * v11[1] - args[1] * v11[0]) / d];
}
/**
 * @param {?} results
 * @param {Function} f
 * @return {?}
 */
function U(results, f) {
    return fold(results, [], function (err, x) {
        return push(err, f(x));
    });
}
/**
 * @param {Array} v11
 * @return {?}
 */
function N(v11) {
    return [v11[0], -v11[1]];
}
/**
 * @param {Array} data
 * @param {Function} cb
 * @return {undefined}
 */
function O(data, cb) {
    fold(data, 0, function (dataAndEvents, outErr) {
        cb(outErr);
    });
}
/** @type {Array} */
var I = [[false, [[[0, 0], [0, 0]], [[1, 0], [1, 0]], [[1, 1], [1, 1]], [[0, 1], [0, 1]]]]];
/** @type {Array} */
var G = [];
/** @type {number} */
var E = 0;
/** @type {Array} */
var J = [];
$(function () {
    Y([0, 1, 2, 3]);
});
